import Head from "next/head";
import {questions} from "../../../../data/questions";
import styles from '@/styles/Home.module.css'
import { Inter } from "next/font/google";
import { useState } from "react";
const inter = Inter({ subsets: ['latin'] })

export default function Browse({question, answer} : any) {
    const [isFlipped, toggleFlipped] = useState(false);
    
    return (
      <>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={styles.main}>
          <div className={styles.description}>
            <p>
              Get started by editing&nbsp;
              <code className={styles.code}>src/pages/index.tsx</code>
            </p>
            
          </div>
  
          {!isFlipped && <div className={styles.center} onClick={() => toggleFlipped(true)}>
              <h2 className={inter.className}>Q: {question}</h2>
          </div>}

          {isFlipped && <div className={styles.center} onClick={() => toggleFlipped(false)}>
              <h2 className={inter.className}>A: {answer}</h2>
          </div>}
  
          <div className={styles.grid}>
              <div
                  className={styles.button}
              >
                  <h2 className={inter.className}>
                  <span>&lt;- Prev</span>
                  </h2>
              </div>
  
              <div
                  className={styles.button}
              >
                  <h2 className={inter.className}>
                  <span>Next -&gt;</span>
                  </h2>
              </div>
          </div>
        </main>
      </>
    )
}

export async function getStaticProps(context : any) {
    console.log(context);
    // Create an array of paths for each category
    // const question = "TEST QUESTION for " + context.params.flashcard;
    // const answer  = "TEST ANSWER";

    const question = questions[0].question;
    const answer = questions[0].answer;
    
    // Return the paths as props
    return {
      props : {
        question,
        answer
      }
    }
}

export async function getStaticPaths() {

    // console.log(questions)
    
    // Create an array of paths for each category
    const paths = questions.map((flashcard : any) => ({
      params: { flashcard: flashcard._id.$oid.toString() }
    }));
    
    // Return the paths as props
    return {
      paths,
      fallback: false
    }
}